@Library('son-dev-utils-shared-library')
import jenkins.utils.*

logging = new logging() // https://gerrit.ericsson.se/gitweb?p=OSS/com.ericsson.oss.services.sonom/son-dev-utils.git;a=blob_plain;f=src/jenkins/utils/logging.groovy;hb=master
utils = new utils()     // https://gerrit.ericsson.se/gitweb?p=OSS/com.ericsson.oss.services.sonom/son-dev-utils.git;a=blob_plain;f=src/jenkins/utils/utils.groovy;hb=master

pipeline {
    agent {
        node {
            label SLAVE
        }
    }
    tools {
        jdk 'jdk8'
        maven 'maven'
    }
    options {
        skipDefaultCheckout true
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '40', artifactNumToKeepStr: '20'))
    }

    stages {
        stage('Clean') {
            steps {
                sh '''
                    echo "Cleanup workspace"
                    sudo chmod -fR 777 "${WORKSPACE}"
                    sudo rm -Rf ./*
                '''
            }
        }
        stage('Init'){
            steps{
                script{
                    print "Repo name is ECSON Release Version"
                    checkout([$class: 'GitSCM', branches: [[name: '*/master']],extensions: [[$class: 'RelativeTargetDirectory',
                    relativeTargetDir: '.']],userRemoteConfigs: [[url: "ssh://gerrit.sero.gic.ericsson.se:29418/OSS/com.ericsson.oss.ci.sonom/${SERVICE_NAME}.git"]]])
                }
            }
        }
        stage('Confirmation'){
            steps {
                script {
                    currentBuild.description = "[ECSON Release Version]Are you sure you want to bump the version?"
                }
                input "Are you sure you want to bump the ${SERVER_FIELD_TO_BE_BUMPED} version for ${SERVICE_NAME}?"
            }
        }
        stage('Bump Version') {
            steps {
                script {
                    sh 'hostname'
                    def Version = sh(returnStdout: true, script: "grep ECSON_CI_VERIFIED version.properties | cut -f2 -d'='").trim()
                    sh 'docker run --rm -v $PWD/version.properties:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump $SERVER_FIELD_TO_BE_BUMPED'
                    env.LATEST_TAG_VERSION = sh(returnStdout: true, script: "grep ECSON_CI_VERIFIED version.properties | cut -f2 -d'='").trim()
                    sh "cat version.properties"
                    if (env.PUSH_COMMIT == "true") {
                        sh '''
                            git add .
                            git commit -m \"[ci-skip] Updated ${SERVER_FIELD_TO_BE_BUMPED} version in version.properties file commit  ${LATEST_TAG_VERSION}\"
                            git push origin HEAD:master
                            git tag -af ${LATEST_TAG_VERSION} -m \"Updated ${SERVER_FIELD_TO_BE_BUMPED} version in version.properties file tag ${LATEST_TAG_VERSION}\"
                            git push origin HEAD:refs/tags/${LATEST_TAG_VERSION}
                        '''
                        currentBuild.description = "[${SERVICE_NAME}] - ${SERVER_FIELD_TO_BE_BUMPED} version bumped to ${LATEST_TAG_VERSION}"
                    } else {
                        currentBuild.description = "PUSH_COMMIT set to false, no commit was made.\n[${SERVICE_NAME}] ${SERVER_FIELD_TO_BE_BUMPED} version NOT bumped from ${Version} to ${LATEST_TAG_VERSION}"
                    }
                }
            }
        }
    }
}