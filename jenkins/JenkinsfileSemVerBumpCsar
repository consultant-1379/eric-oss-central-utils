@Library('son-dev-utils-shared-library')
import jenkins.utils.*

logging = new logging() // https://gerrit.ericsson.se/gitweb?p=OSS/com.ericsson.oss.services.sonom/son-dev-utils.git;a=blob_plain;f=src/jenkins/utils/logging.groovy;hb=master
utils = new utils()     // https://gerrit.ericsson.se/gitweb?p=OSS/com.ericsson.oss.services.sonom/son-dev-utils.git;a=blob_plain;f=src/jenkins/utils/utils.groovy;hb=master

def repoName

pipeline {
    agent {
        node {
            label SLAVE
        }
    }
    tools {
        jdk 'jdk8'
        maven 'maven'
    }
    options {
        skipDefaultCheckout true
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '40', artifactNumToKeepStr: '20'))
    }

    stages {
        stage('Clean') {
            steps {
                sh '''
                    echo "Cleanup workspace"
                    sudo chmod -fR 777 "${WORKSPACE}"
                    sudo rm -Rf ./*
                '''
                sh 'hostname'
            }
        }
        stage('Init'){
            steps{
                script{
                    repoName = mapOfServiceNames(CSAR_NAME)
                    print "Repo name is ${repoName}"
                    checkout([$class: 'GitSCM', branches: [[name: '*/master']],extensions: [[$class: 'RelativeTargetDirectory',
                    relativeTargetDir: '.']],userRemoteConfigs: [[url: "ssh://gerrit.sero.gic.ericsson.se:29418/${repoName}.git"]]])
                }
            }
        }
        stage('Confirmation'){
            steps {
                script {
                    currentBuild.description = "Are you sure you want to bump the version?"
                }
                input "Are you sure you want to bump the ${SEMVER_FIELD_TO_BE_BUMPED} version for ${CSAR_NAME}?"
            }
        }
        stage('Bump Version') {
            steps {
                script {
                    sh "cat ${WORKSPACE}/charts/${CSAR_NAME}/Chart.yaml | grep -oP version:.* | sed -n -e 's/^.*version: //p' > ${WORKSPACE}/VERSION_PREFIX"
                    sh "cat ${WORKSPACE}/VERSION_PREFIX"
                    sh "cp ${WORKSPACE}/VERSION_PREFIX ${WORKSPACE}/OLD_VERSION"
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'OLD_VERSION'

                    sh 'docker run --rm -v ${WORKSPACE}/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump ${SEMVER_FIELD_TO_BE_BUMPED}'
                    newVersion = readFile "VERSION_PREFIX"
                    env.IMAGE_VERSION = newVersion.trim()
                    sh "cat ${WORKSPACE}/VERSION_PREFIX"
                    sh "cp ${WORKSPACE}/VERSION_PREFIX ${WORKSPACE}/NEW_VERSION"
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'NEW_VERSION'

                    sh "git status"
                    sh "git reset --hard"
                    sh "git clean -d -f"
                    sh "git status"

                    echo "Update Chart.yaml file to new version: ${IMAGE_VERSION}"
                    sh "sed -i -e 's/version:.*/version: ${IMAGE_VERSION}/g' ${WORKSPACE}/charts/${CSAR_NAME}/Chart.yaml"
                    sh "git status"

                    if (params.PUSH_COMMIT == true) {
                        sh '''
                            git add .
                            git commit -m "[version-bump] Version ${IMAGE_VERSION}"
                            git push origin HEAD:master
                        '''
                        currentBuild.description = "[${CSAR_NAME}] ${SEMVER_FIELD_TO_BE_BUMPED} version bumped to " + newVersion
                    } else {
                        currentBuild.description = "PUSH_COMMIT set to false, no commit was made.\n[${CSAR_NAME}] ${SEMVER_FIELD_TO_BE_BUMPED} version NOT bumped to " + newVersion
                    }

                    sh "cat ${WORKSPACE}/charts/${CSAR_NAME}/Chart.yaml"
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'charts/${CSAR_NAME}/Chart.yaml'
                }
            }
        }
    }
}
def mapOfServiceNames(CSAR_NAME) {
    echo "Mapping the CSAR ${CSAR_NAME} to the Gerrit repo"

    repoName = [
        "eric-oss-ec-son-common"    :   "OSS/com.ericsson.oss.services.sonom/son-common-package",
        "eric-oss-ec-son-flm"       :   "OSS/com.ericsson.oss.services.sonom/son-flm-package",
        "eric-oss-ec-son-ret"       :   "OSS/com.ericsson.oss.services.sonom/son-ret-package",
        "eric-oss-ec-son-mediation" :   "OSS/com.ericsson.oss.services.sonom/son-enm-mediation-package"
    ]
    return repoName.get(params.CSAR_NAME) ?: []
}